% copy the data from https://github.com/CPernet/ReproducibleQuantitativeDataScience/blob/main/provenance/ProvenanceInPractice.ipynb

icecream = [
  0	  12.510660	1.355382
  1	  21.609735	1.955606
  2	  0.003431	0.329040
  3	  9.069977	1.743167
  4	  4.402677	0.249579
  5	  2.770158	1.465262
  6	  5.587806	3.125453
  7	  10.366822	2.605946
  8	  11.903024	1.800083
  9	  16.164502	1.459413
  10	12.575835	1.300828
  11	20.556585	4.405503
  12	6.133567	1.561938
  13	26.343523	2.558298
  14	0.821628	1.259384
  15	20.114025	4.776424
  16	12.519144	2.163421
  17	16.760695	3.013928
  18	4.211608	1.651138
  19	5.943045	1.143004
  20	24.022337	1.859343
  21	29.047847	3.071311
  22	9.402725	1.574666
  23	20.769678	3.317430
  24	26.291675	4.029956
  25	26.838200	4.167619
  26	2.551326	1.498198
  27	1.171643	1.982778
  28	5.094913	0.670178
  29	26.344275	4.448224
  30	2.950405	1.758797
  31	12.633229	1.754676
  32	28.736686	3.883242
  33	15.994959	2.257341
  34	20.756313	3.861322
  35	9.465469	3.308606
  36	20.595028	4.901828
  37	25.038770	1.690068
  38	0.548648	-0.398393
  39	22.504329	2.370895
  40	29.665833	3.632190
  41	22.444970	3.746583
  42	8.413320	2.016745
  43	23.678380	0.950997
  44	3.096780	0.951861
  45	13.436806	2.947708
  46	27.257865	3.501583
  47	8.808424	2.496047
  48	8.633260	1.497110
  49	3.900857	1.124313
  ];

%%

% let's plot the data

temp = icecream(:,2);
scoops = icecream(:,3);

plot(temp, scoops, '.')

%%

% a negative number of scoops does not make sense

icecream(icecream(:,3)<0,:) = [];

%%

% the linear model with intercept is
% scoops = temp*b1 + b0

p = polyfit(temp, scoops, 1);
predicted = polyval(p, 40)

% predicted =
%     4.5993

%%

% the linear model without intercept is
% scoops = temp*b1

predicted = pinv(temp)*scoops * 40
predicted = temp\scoops * 40

% predicted =
%     5.7001

